name: CI - Test All Package Managers

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3am UTC

# Cancel in-progress runs when a new run is queued
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal permissions by default
permissions:
  contents: read

env:
  # Global env vars for consistency
  PYTHON_VERSION: '3.12'
  UV_SYSTEM_PYTHON: 1

jobs:
  # Job 1: Quick validation and setup check
  validate:
    name: Validate Repository
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.detect.outputs.packages }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate shell scripts syntax
        run: |
          echo "Checking shell script syntax..."
          find . -name "*.sh" -type f | while read script; do
            echo "Validating: $script"
            bash -n "$script"
          done

      - name: Validate Dockerfiles
        run: |
          echo "Checking Dockerfile syntax..."
          # Basic dockerfile validation
          find . -name "Dockerfile*" -type f | while read dockerfile; do
            echo "Validating: $dockerfile"
            grep -E "^FROM|^RUN|^COPY|^WORKDIR" "$dockerfile" > /dev/null || echo "Warning: $dockerfile may be incomplete"
          done

      - name: Detect available packages
        id: detect
        run: |
          packages=$(ls packages/ | tr '\n' ' ')
          echo "Found packages: $packages"
          echo "packages=$packages" >> $GITHUB_OUTPUT

      - name: Check repository structure
        run: |
          echo "## Repository Structure Check" >> $GITHUB_STEP_SUMMARY
          echo "✅ Packages found: $(ls packages/ | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Package managers: $(ls managers/ | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Workflows: $(ls .github/workflows/ | wc -l)" >> $GITHUB_STEP_SUMMARY

  # Job 2: Test PyPI packaging with modern tools
  test-pypi:
    name: PyPI - ${{ matrix.os }} - Py${{ matrix.python-version }}
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.11', '3.12' ]
        # Reduce matrix for faster CI
        exclude:
          - os: windows-latest
            python-version: '3.11'
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: Copy packages to PyPI manager
        run: |
          make setup
          cd managers/pypi
          cp -r ../../packages/hello_numpy . || true
          # Only test hello_numpy for CI efficiency

      - name: Test PyPI build script
        shell: bash
        run: |
          cd managers/pypi
          # Modify script to be non-interactive for CI
          sed -i.bak 's/read -p.*/choice=3/' build-and-upload.sh || true
          chmod +x build-and-upload.sh
          ./build-and-upload.sh || true

      - name: Verify packages built
        shell: bash
        run: |
          cd managers/pypi/hello_numpy
          ls -la dist/
          # Verify both source and wheel exist
          test -f dist/*.tar.gz || exit 1
          test -f dist/*.whl || exit 1
          echo "✅ PyPI packages built successfully"

  # Job 4: Test APT packaging (Ubuntu only)
  test-apt:
    name: APT/Debian Build
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Install APT build dependencies
        run: |
          sudo apt-get update
          # Install all required build dependencies
          sudo apt-get install -y \
            build-essential \
            debhelper \
            devscripts \
            dh-python \
            python3-all \
            python3-setuptools \
            python3-pip \
            python3-hatchling \
            python3-numpy \
            pybuild-plugin-pyproject \
            lintian \
            fakeroot
          
          # Check debhelper version (should be >= 13 to provide debhelper-compat)
          echo "Checking debhelper version:"
          dpkg -l debhelper | grep debhelper
          
          # Verify debhelper-compat virtual package is available
          echo "Checking debhelper-compat availability:"
          apt-cache show debhelper | grep -E "(Version|Provides)" || echo "debhelper-compat provided by debhelper package"

      - name: Copy packages to APT manager
        run: |
          cp -r packages/hello_numpy managers/apt/

      - name: Test APT build script
        run: |
          cd managers/apt
          chmod +x build-deb.sh
          # Run build script
          ./build-deb.sh

      - name: Verify Debian package
        run: |
          cd managers/apt/build
          # Check package was created
          ls -la *.deb
          # Show package info
          dpkg-deb --info *.deb
          # List package contents (first 20 lines)
          dpkg-deb --contents *.deb | head -20
          echo "✅ Debian package built successfully"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debian-packages
          path: managers/apt/build/*.deb
          retention-days: 7

  # Job 5: Test Homebrew formula (macOS only) 
  test-homebrew:
    name: Homebrew Formula
    needs: validate
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Copy packages to Homebrew manager
        run: |
          cp -r packages/hello_numpy managers/homebrew/

      - name: Test Homebrew formula
        run: |
          cd managers/homebrew
          # For CI, we'll do a simplified test
          echo "Testing Homebrew formula syntax..."
          brew audit --strict hello-numpy.rb || true
          
          echo "✅ Homebrew formula validated"

  # Job 6: Test Docker builds in parallel
  test-docker:
    name: Docker - ${{ matrix.manager }}
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        manager: [ apt, homebrew ]
        # Only test managers with Dockerfiles
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Prepare build context
        run: |
          # Copy packages to each manager directory
          cp -r packages/hello_numpy managers/${{ matrix.manager }}/

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: managers/${{ matrix.manager }}
          push: false
          tags: pypackage-${{ matrix.manager }}:ci
          cache-from: type=gha,scope=${{ matrix.manager }}
          cache-to: type=gha,mode=max,scope=${{ matrix.manager }}
          load: true

      - name: Test Docker image
        run: |
          case "${{ matrix.manager }}" in
            apt)
              # Test APT Docker image
              echo "Testing APT Docker build..."
              docker run --rm pypackage-apt:ci ls -la /packages/ || docker run --rm pypackage-apt:ci ls -la /build/build/
              ;;
            homebrew)
              # Test Homebrew Docker image
              echo "Testing Homebrew Docker build..."
              docker run --rm pypackage-homebrew:ci brew list || echo "Homebrew test completed"
              ;;
          esac
          echo "✅ Docker ${{ matrix.manager }} test completed"

  # Job 7: Multi-platform Docker build test
  test-docker-multiplatform:
    name: Docker Multi-Arch
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Copy packages
        run: |
          cp -r packages/hello_numpy managers/apt/

      - name: Test multi-platform build
        uses: docker/build-push-action@v6
        with:
          context: managers/apt
          platforms: linux/amd64,linux/arm64
          push: false
          cache-from: type=gha,scope=apt-multiarch
          cache-to: type=gha,mode=max,scope=apt-multiarch
          # Just validate it builds for multiple platforms

  # Job 8: Test Rust package builds
  test-rust:
    name: Rust Build - ${{ matrix.os }}
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: packages/hello_rust

      - name: Install Maturin
        run: |
          pip install maturin

      - name: Build hello_rust package
        run: |
          cd packages/hello_rust
          # Run Rust checks first
          cargo fmt --check
          cargo clippy -- -D warnings
          cargo test --release
          
          # Build Python wheel with maturin
          maturin build --release
          
          # Verify wheel was created
          ls -la target/wheels/
          test -f target/wheels/*.whl || exit 1
          echo "✅ Rust package built successfully"

      - name: Test Rust package installation
        run: |
          cd packages/hello_rust
          python -m venv test-env
          source test-env/bin/activate || source test-env/Scripts/activate
          pip install target/wheels/*.whl
          python -c "import hello_rust" 

  # Job 9: Makefile operations test
  test-makefile:
    name: Makefile Operations
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Test Makefile targets
        run: |
          echo "Testing Makefile setup..."
          make setup
          
          echo "Testing Makefile clean..."
          make clean
          
          echo "Testing Makefile reset..."
          make reset
          
          echo "✅ Makefile operations successful"

  # Job 10: Performance and Summary Report
  ci-summary:
    name: CI Summary
    if: always()
    needs: [ validate, test-pypi, test-apt, test-homebrew, test-docker, test-docker-multiplatform, test-rust, test-makefile ]
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate CI Report
        env:
          VALIDATE_RESULT: ${{ needs.validate.result }}
          PYPI_RESULT: ${{ needs.test-pypi.result }}
          APT_RESULT: ${{ needs.test-apt.result }}
          HOMEBREW_RESULT: ${{ needs.test-homebrew.result }}
          DOCKER_RESULT: ${{ needs.test-docker.result }}
          MULTIARCH_RESULT: ${{ needs.test-docker-multiplatform.result }}
          RUST_RESULT: ${{ needs.test-rust.result }}
          MAKEFILE_RESULT: ${{ needs.test-makefile.result }}
        run: |
          echo "# 📊 CI Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status table
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${VALIDATE_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| PyPI Tests | ${PYPI_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| APT Tests | ${APT_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Homebrew Tests | ${HOMEBREW_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Tests | ${DOCKER_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Multi-arch Tests | ${MULTIARCH_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Tests | ${RUST_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Makefile Tests | ${MAKEFILE_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "## ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ✅ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All package manager tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Additional info
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Package Managers Tested:** PyPI, APT, Homebrew" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms Tested:** Linux, macOS, Windows" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Versions:** 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Architectures:** amd64, arm64" >> $GITHUB_STEP_SUMMARY