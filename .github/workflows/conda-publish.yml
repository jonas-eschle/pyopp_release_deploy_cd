name: Publish Conda Package

# Publishes conda packages to anaconda.org
# Educational example of conda CD pipeline with the latest tools

on:
  push:
  workflow_dispatch:

# Global environment variables shared across all jobs
env:
  PACKAGE_NAME: 'hello_numpy'

jobs:
  build-and-publish:
    name: Build and publish conda package
    runs-on: ${{ matrix.os }}
    
    # Build matrix: test multiple OS and Python versions
    strategy:
      fail-fast: false  # Continue other builds if one fails
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.10', '3.11', '3.12' , '3.13' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning

      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          miniforge-variant: Miniforge3
          activate-environment: build
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          channel-priority: strict
          show-channel-urls: true
          use-only-tar-bz2: false  # Allow .conda files (newer format)

      - name: Install modern build tools
        shell: bash -l {0}  # Use login shell to activate conda environment
        run: |
          # mamba: faster conda replacement for dependency resolution
          # boa: modern conda-build wrapper (faster builds)
          # grayskull: auto-generates conda recipes from PyPI
          mamba install -y conda-build boa anaconda-client grayskull

      - name: Prepare package source and recipe
        shell: bash -l {0}
        run: |
          # Build source distribution 
          cd packages/${{ env.PACKAGE_NAME }}
          pipx run build --sdist  # Creates .tar.gz for conda to consume

          # Create isolated build directory (prevents contamination)
          mkdir -p /tmp/conda-build/${{ env.PACKAGE_NAME }}
          cd /tmp/conda-build/${{ env.PACKAGE_NAME }}

          # Copy pre-configured meta.yaml template
          cp -f $GITHUB_WORKSPACE/managers/conda/recipe/${{ env.PACKAGE_NAME }}/meta.yaml .

          # Copy package source for local build
          cp -r $GITHUB_WORKSPACE/packages/${{ env.PACKAGE_NAME }}/* .

          # Modify recipe for local build (no remote download needed)
          sed -i.bak 's|url: file://.*|path: .|g' meta.yaml    # Use local path
          sed -i.bak '/sha256:/d' meta.yaml                    # Remove hash check for local builds

          echo "=== Final recipe (meta.yaml) ==="
          cat meta.yaml
          echo "=== Build directory contents ==="
          ls -la

          # Pass build directory to subsequent steps
          echo "CONDA_BUILD_DIR=/tmp/conda-build/${{ env.PACKAGE_NAME }}" >> $GITHUB_ENV

      - name: Build conda package with mamba
        shell: bash -l {0}
        run: |
          # Change to our prepared build directory
          cd $CONDA_BUILD_DIR

          # Create output directory for built packages
          mkdir -p $GITHUB_WORKSPACE/managers/conda/dist

          # Build using conda-mambabuild (faster than conda-build)
          # -c conda-forge: use conda-forge channel for dependencies
          # --output-folder: where to save built packages
          # --no-anaconda-upload: don't auto-upload (we'll do it manually)
          conda mambabuild . \
            -c conda-forge \
            --output-folder $GITHUB_WORKSPACE/managers/conda/dist \
            --no-anaconda-upload

          echo "=== Successfully built packages: ==="
          find $GITHUB_WORKSPACE/managers/conda/dist -name "*.tar.bz2" -o -name "*.conda" | sort

      - name: Test conda package locally
        shell: bash -l {0}
        working-directory: ./managers/conda
        run: |
          # Create isolated test environment
          mamba create -n test-env python=${{ matrix.python-version }} -y
          mamba activate test-env

          # Install our package from local build + dependencies from conda-forge
          # Order matters: local channel first, then conda-forge for dependencies
          mamba install -c ./dist -c conda-forge ${{ env.PACKAGE_NAME }} -y

          # Test basic import functionality
          python -c "import ${{ env.PACKAGE_NAME }}; print('Package imported successfully')"


      # Example of publishing (disabled for tutorial safety)
      - name: Upload to anaconda.org (TUTORIAL - DISABLED)
        # Conditions for real publishing:
        # - Only on git tags (v1.0.0, etc.) 
        # - Only on one OS (avoid duplicates)
        # - Only on one Python version (platform-independent packages)
        if: false && startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        shell: bash -l {0}
        working-directory: ./managers/conda
        env:
          # Secrets would be configured in GitHub repository settings
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        run: |
          # token-based authentication (more secure than username/password)
          anaconda login --token $ANACONDA_API_TOKEN

          # Upload all built packages with proper labeling
          for pkg in dist/*/*.tar.bz2 dist/*/*.conda; do
            if [ -f "$pkg" ]; then
              echo "Uploading: $(basename $pkg)"
              anaconda upload "$pkg" \
                --user ${{ secrets.ANACONDA_USERNAME || 'your-channel' }} \
                --label main \                    # Primary release channel
                --label py${{ matrix.python-version }} \  # Python version specific
                --skip-existing                   # Don't fail if already exists
            fi
          done

          # Clean logout (security best practice)
          anaconda logout
